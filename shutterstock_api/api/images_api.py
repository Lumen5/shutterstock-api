# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from shutterstock_api.api_client import ApiClient


class ImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_lightbox_items(self, id, body, **kwargs):  # noqa: E501
        """Add images to collections  # noqa: E501

        This endpoint adds one or more images to a collection by image IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_lightbox_items(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param CollectionItemRequest body: Array of image IDs to add to the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_lightbox_items_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_lightbox_items_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def add_lightbox_items_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Add images to collections  # noqa: E501

        This endpoint adds one or more images to a collection by image IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_lightbox_items_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param CollectionItemRequest body: Array of image IDs to add to the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_lightbox_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_lightbox_items`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_lightbox_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/{id}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_lightbox(self, body, **kwargs):  # noqa: E501
        """Create image collections  # noqa: E501

        This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lightbox(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CollectionCreateRequest body: The names of the new collections (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_lightbox_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_lightbox_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_lightbox_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create image collections  # noqa: E501

        This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lightbox_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CollectionCreateRequest body: The names of the new collections (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lightbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_lightbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_lightbox(self, id, **kwargs):  # noqa: E501
        """Delete image collections  # noqa: E501

        This endpoint deletes an image collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lightbox(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_lightbox_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_lightbox_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_lightbox_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete image collections  # noqa: E501

        This endpoint deletes an image collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lightbox_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lightbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_lightbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_lightbox_items(self, id, **kwargs):  # noqa: E501
        """Remove images from collections  # noqa: E501

        This endpoint removes one or more images from a collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lightbox_items(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param list[str] item_id: One or more image IDs to remove from the collection
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_lightbox_items_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_lightbox_items_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_lightbox_items_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove images from collections  # noqa: E501

        This endpoint removes one or more images from a collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lightbox_items_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param list[str] item_id: One or more image IDs to remove from the collection
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lightbox_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_lightbox_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'item_id' in params:
            query_params.append(('item_id', params['item_id']))  # noqa: E501
            collection_formats['item_id'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/{id}/items', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_image(self, id, body, **kwargs):  # noqa: E501
        """Download images  # noqa: E501

        This endpoint redownloads images that you have already received a license for.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_image(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: License ID (required)
        :param RedownloadImage body: Information about the images to redownload (required)
        :return: Url
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_image_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.download_image_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def download_image_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Download images  # noqa: E501

        This endpoint redownloads images that you have already received a license for.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_image_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: License ID (required)
        :param RedownloadImage body: Information about the images to redownload (required)
        :return: Url
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `download_image`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `download_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/licenses/{id}/downloads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Url',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featured_lightbox(self, id, **kwargs):  # noqa: E501
        """Get the details of featured image collections  # noqa: E501

        This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_lightbox(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param str embed: Which sharing information to include in the response, such as a URL to the collection
        :param str asset_hint: Cover image size, defaults to 1x
        :return: FeaturedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featured_lightbox_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featured_lightbox_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_featured_lightbox_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the details of featured image collections  # noqa: E501

        This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_lightbox_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param str embed: Which sharing information to include in the response, such as a URL to the collection
        :param str asset_hint: Cover image size, defaults to 1x
        :return: FeaturedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'embed', 'asset_hint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featured_lightbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_featured_lightbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'embed' in params:
            query_params.append(('embed', params['embed']))  # noqa: E501
        if 'asset_hint' in params:
            query_params.append(('asset_hint', params['asset_hint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/featured/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturedCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featured_lightbox_items(self, id, **kwargs):  # noqa: E501
        """Get the contents of featured image collections  # noqa: E501

        This endpoint lists the IDs of images in a featured collection and the date that each was added.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_lightbox_items(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :return: CollectionItemDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featured_lightbox_items_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featured_lightbox_items_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_featured_lightbox_items_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the contents of featured image collections  # noqa: E501

        This endpoint lists the IDs of images in a featured collection and the date that each was added.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_lightbox_items_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :return: CollectionItemDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featured_lightbox_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_featured_lightbox_items`")  # noqa: E501

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_featured_lightbox_items`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 150:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_featured_lightbox_items`, must be a value less than or equal to `150`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_featured_lightbox_items`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/featured/{id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionItemDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featured_lightbox_list(self, **kwargs):  # noqa: E501
        """List featured image collections  # noqa: E501

        This endpoint lists featured collections of specific types and a name and cover image for each collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_lightbox_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str embed: Which sharing information to include in the response, such as a URL to the collection
        :param list[str] type: The types of collections to return
        :param str asset_hint: Cover image size, defaults to 1x
        :return: FeaturedCollectionDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featured_lightbox_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_featured_lightbox_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_featured_lightbox_list_with_http_info(self, **kwargs):  # noqa: E501
        """List featured image collections  # noqa: E501

        This endpoint lists featured collections of specific types and a name and cover image for each collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featured_lightbox_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str embed: Which sharing information to include in the response, such as a URL to the collection
        :param list[str] type: The types of collections to return
        :param str asset_hint: Cover image size, defaults to 1x
        :return: FeaturedCollectionDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['embed', 'type', 'asset_hint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featured_lightbox_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'embed' in params:
            query_params.append(('embed', params['embed']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'asset_hint' in params:
            query_params.append(('asset_hint', params['asset_hint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/featured', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturedCollectionDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image(self, id, **kwargs):  # noqa: E501
        """Get details about images  # noqa: E501

        This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Image ID (required)
        :param str view: Amount of detail to render in the response
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_image_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details about images  # noqa: E501

        This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Image ID (required)
        :param str view: Amount of detail to render in the response
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_categories(self, **kwargs):  # noqa: E501
        """List image categories  # noqa: E501

        This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CategoryDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_image_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_image_categories_with_http_info(self, **kwargs):  # noqa: E501
        """List image categories  # noqa: E501

        This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CategoryDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CategoryDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_license_list(self, **kwargs):  # noqa: E501
        """List image licenses  # noqa: E501

        This endpoint lists existing licenses. You can filter the results according to the type of license or the image ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_license_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: Show licenses for the specified image ID
        :param str license: Show images that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 20
        :param str sort: Sort order
        :return: DownloadHistoryDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_license_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_image_license_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_image_license_list_with_http_info(self, **kwargs):  # noqa: E501
        """List image licenses  # noqa: E501

        This endpoint lists existing licenses. You can filter the results according to the type of license or the image ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_license_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: Show licenses for the specified image ID
        :param str license: Show images that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 20
        :param str sort: Sort order
        :return: DownloadHistoryDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'license', 'page', 'per_page', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_license_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_image_license_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 200:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_image_license_list`, must be a value less than or equal to `200`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_image_license_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'image_id' in params:
            query_params.append(('image_id', params['image_id']))  # noqa: E501
        if 'license' in params:
            query_params.append(('license', params['license']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/licenses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadHistoryDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_list(self, id, **kwargs):  # noqa: E501
        """List images  # noqa: E501

        This endpoint lists information about one or more images, including the available sizes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: One or more image IDs (required)
        :param str view: Amount of detail to render in the response
        :return: ImageDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_image_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """List images  # noqa: E501

        This endpoint lists information about one or more images, including the available sizes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: One or more image IDs (required)
        :param str view: Amount of detail to render in the response
        :return: ImageDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_image_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_recommendations(self, id, **kwargs):  # noqa: E501
        """List recommended images  # noqa: E501

        This endpoint returns images that customers put in the same collection as the specified image IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_recommendations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: Image IDs (required)
        :param int max_items: Maximum number of results returned in the response
        :param bool safe: Restrict results to safe images
        :return: RecommendationDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_recommendations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_recommendations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_image_recommendations_with_http_info(self, id, **kwargs):  # noqa: E501
        """List recommended images  # noqa: E501

        This endpoint returns images that customers put in the same collection as the specified image IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_recommendations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: Image IDs (required)
        :param int max_items: Maximum number of results returned in the response
        :param bool safe: Restrict results to safe images
        :return: RecommendationDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'max_items', 'safe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_recommendations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_image_recommendations`")  # noqa: E501

        if 'max_items' in params and params['max_items'] > 500:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `get_image_recommendations`, must be a value less than or equal to `500`")  # noqa: E501
        if 'max_items' in params and params['max_items'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `get_image_recommendations`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'max_items' in params:
            query_params.append(('max_items', params['max_items']))  # noqa: E501
        if 'safe' in params:
            query_params.append(('safe', params['safe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/recommendations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecommendationDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lightbox(self, id, **kwargs):  # noqa: E501
        """Get the details of image collections  # noqa: E501

        This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lightbox(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param list[str] embed: Which sharing information to include in the response, such as a URL to the collection
        :param str share_code: Code to retrieve a shared collection
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lightbox_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lightbox_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_lightbox_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the details of image collections  # noqa: E501

        This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lightbox_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param list[str] embed: Which sharing information to include in the response, such as a URL to the collection
        :param str share_code: Code to retrieve a shared collection
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'embed', 'share_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lightbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lightbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'embed' in params:
            query_params.append(('embed', params['embed']))  # noqa: E501
            collection_formats['embed'] = 'multi'  # noqa: E501
        if 'share_code' in params:
            query_params.append(('share_code', params['share_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lightbox_items(self, id, **kwargs):  # noqa: E501
        """Get the contents of image collections  # noqa: E501

        This endpoint lists the IDs of images in a collection and the date that each was added.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lightbox_items(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param str share_code: Code to retrieve the contents of a shared collection
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :return: CollectionItemDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lightbox_items_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lightbox_items_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_lightbox_items_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the contents of image collections  # noqa: E501

        This endpoint lists the IDs of images in a collection and the date that each was added.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lightbox_items_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param str share_code: Code to retrieve the contents of a shared collection
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :return: CollectionItemDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'share_code', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lightbox_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lightbox_items`")  # noqa: E501

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_lightbox_items`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 150:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_lightbox_items`, must be a value less than or equal to `150`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_lightbox_items`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'share_code' in params:
            query_params.append(('share_code', params['share_code']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/{id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionItemDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lightbox_list(self, **kwargs):  # noqa: E501
        """List image collections  # noqa: E501

        This endpoint lists your collections of images and their basic attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lightbox_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] embed: Which sharing information to include in the response, such as a URL to the collection
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :return: CollectionDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lightbox_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lightbox_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lightbox_list_with_http_info(self, **kwargs):  # noqa: E501
        """List image collections  # noqa: E501

        This endpoint lists your collections of images and their basic attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lightbox_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] embed: Which sharing information to include in the response, such as a URL to the collection
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :return: CollectionDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['embed', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lightbox_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_lightbox_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 150:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_lightbox_list`, must be a value less than or equal to `150`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_lightbox_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'embed' in params:
            query_params.append(('embed', params['embed']))  # noqa: E501
            collection_formats['embed'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_similar_images(self, id, **kwargs):  # noqa: E501
        """List similar images  # noqa: E501

        This endpoint returns images that are visually similar to an image that you specify.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_similar_images(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Image ID (required)
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 20
        :param str view: Amount of detail to render in the response
        :return: ImageSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_similar_images_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_similar_images_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_similar_images_with_http_info(self, id, **kwargs):  # noqa: E501
        """List similar images  # noqa: E501

        This endpoint returns images that are visually similar to an image that you specify.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_similar_images_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Image ID (required)
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 20
        :param str view: Amount of detail to render in the response
        :return: ImageSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page', 'per_page', 'view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_similar_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_similar_images`")  # noqa: E501

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_similar_images`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 500:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_similar_images`, must be a value less than or equal to `500`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_similar_images`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/{id}/similar', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_updated_images(self, **kwargs):  # noqa: E501
        """List updated images  # noqa: E501

        This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_updated_images(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] type: Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways
        :param date start_date: Show images updated on or after the specified date, in the format YYYY-MM-DD
        :param date end_date: Show images updated before the specified date, in the format YYYY-MM-DD
        :param str interval: Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :param str sort: Sort order
        :return: UpdatedMediaDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_updated_images_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_updated_images_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_updated_images_with_http_info(self, **kwargs):  # noqa: E501
        """List updated images  # noqa: E501

        This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_updated_images_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] type: Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways
        :param date start_date: Show images updated on or after the specified date, in the format YYYY-MM-DD
        :param date end_date: Show images updated before the specified date, in the format YYYY-MM-DD
        :param str interval: Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 100
        :param str sort: Sort order
        :return: UpdatedMediaDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'start_date', 'end_date', 'interval', 'page', 'per_page', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_updated_images" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_updated_images`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 2000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_updated_images`, must be a value less than or equal to `2000`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_updated_images`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/updated', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdatedMediaDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def license_images(self, body, **kwargs):  # noqa: E501
        """License images  # noqa: E501

        This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_images(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LicenseImageRequest body: List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
        :param str subscription_id: Subscription ID to use to license the image
        :param str format: Image format, defaults to jpg
        :param str size: Image size
        :param str search_id: Search ID that was provided in the results of an image search
        :return: LicenseImageResultDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.license_images_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.license_images_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def license_images_with_http_info(self, body, **kwargs):  # noqa: E501
        """License images  # noqa: E501

        This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_images_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LicenseImageRequest body: List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
        :param str subscription_id: Subscription ID to use to license the image
        :param str format: Image format, defaults to jpg
        :param str size: Image size
        :param str search_id: Search ID that was provided in the results of an image search
        :return: LicenseImageResultDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'subscription_id', 'format', 'size', 'search_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `license_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in params:
            query_params.append(('subscription_id', params['subscription_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'search_id' in params:
            query_params.append(('search_id', params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/licenses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseImageResultDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_lightbox(self, id, body, **kwargs):  # noqa: E501
        """Rename image collections  # noqa: E501

        This endpoint sets a new name for an image collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_lightbox(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param CollectionUpdateRequest body: The new name for the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_lightbox_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_lightbox_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def rename_lightbox_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Rename image collections  # noqa: E501

        This endpoint sets a new name for an image collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_lightbox_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Collection ID (required)
        :param CollectionUpdateRequest body: The new name for the collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_lightbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `rename_lightbox`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rename_lightbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/collections/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_images(self, **kwargs):  # noqa: E501
        """Search for images  # noqa: E501

        This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_images(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date added_date: Show images added on the specified date, in the format YYYY-MM-DD
        :param date added_date_start: Show images added on or after the specified date, in the format YYYY-MM-DD
        :param date added_date_end: Show images added before the specified date, in the format YYYY-MM-DD
        :param str category: Show images with the specified Shutterstock-defined category; specify a category name or ID
        :param str color: Specify a hexadecimal color in the format '#4F21EA'; the API groups it into one of 15 color categories and returns images that primarily use that color category
        :param list[str] contributor: Show images with the specified contributor names or IDs, allows multiple
        :param int height: (Deprecated; use height_from and height_to instead) Show images with the specified height
        :param int height_from: Show images with the specified height or larger, in pixels
        :param int height_to: Show images with the specified height or smaller, in pixels
        :param list[str] image_type: Show images of the specified type
        :param str language: Set query and result language (uses Accept-Language header if not set)
        :param list[str] license: Show only images with the specified license
        :param list[str] model: Show image results with the specified model IDs
        :param str orientation: Show image results with horizontal or vertical orientation
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 20
        :param bool people_model_released: Show images of people with a signed model release
        :param str people_age: Show images that feature people of the specified age category
        :param str people_ethnicity: Show images with people of the specified ethnicity
        :param str people_gender: Show images with people of the specified gender
        :param int people_number: Show images with the specified number of people
        :param str query: One or more search terms separated by spaces; you can use NOT to filter out images that match a term
        :param bool safe: Enable or disable safe search
        :param str sort: Sort by
        :param bool spellcheck_query: Spellcheck the search query and return results on suggested spellings
        :param str view: Amount of detail to render in the response
        :param int width: (Deprecated; use width_from and width_to instead) Show images with the specified width
        :param int width_from: Show images with the specified width or larger, in pixels
        :param int width_to: Show images with the specified width or smaller, in pixels
        :return: ImageSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_images_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_images_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_images_with_http_info(self, **kwargs):  # noqa: E501
        """Search for images  # noqa: E501

        This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_images_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date added_date: Show images added on the specified date, in the format YYYY-MM-DD
        :param date added_date_start: Show images added on or after the specified date, in the format YYYY-MM-DD
        :param date added_date_end: Show images added before the specified date, in the format YYYY-MM-DD
        :param str category: Show images with the specified Shutterstock-defined category; specify a category name or ID
        :param str color: Specify a hexadecimal color in the format '#4F21EA'; the API groups it into one of 15 color categories and returns images that primarily use that color category
        :param list[str] contributor: Show images with the specified contributor names or IDs, allows multiple
        :param int height: (Deprecated; use height_from and height_to instead) Show images with the specified height
        :param int height_from: Show images with the specified height or larger, in pixels
        :param int height_to: Show images with the specified height or smaller, in pixels
        :param list[str] image_type: Show images of the specified type
        :param str language: Set query and result language (uses Accept-Language header if not set)
        :param list[str] license: Show only images with the specified license
        :param list[str] model: Show image results with the specified model IDs
        :param str orientation: Show image results with horizontal or vertical orientation
        :param int page: Page number
        :param int per_page: Number of results per page, defaults to 20
        :param bool people_model_released: Show images of people with a signed model release
        :param str people_age: Show images that feature people of the specified age category
        :param str people_ethnicity: Show images with people of the specified ethnicity
        :param str people_gender: Show images with people of the specified gender
        :param int people_number: Show images with the specified number of people
        :param str query: One or more search terms separated by spaces; you can use NOT to filter out images that match a term
        :param bool safe: Enable or disable safe search
        :param str sort: Sort by
        :param bool spellcheck_query: Spellcheck the search query and return results on suggested spellings
        :param str view: Amount of detail to render in the response
        :param int width: (Deprecated; use width_from and width_to instead) Show images with the specified width
        :param int width_from: Show images with the specified width or larger, in pixels
        :param int width_to: Show images with the specified width or smaller, in pixels
        :return: ImageSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['added_date', 'added_date_start', 'added_date_end', 'category', 'color', 'contributor', 'height', 'height_from', 'height_to', 'image_type', 'language', 'license', 'model', 'orientation', 'page', 'per_page', 'people_model_released', 'people_age', 'people_ethnicity', 'people_gender', 'people_number', 'query', 'safe', 'sort', 'spellcheck_query', 'view', 'width', 'width_from', 'width_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_images" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_images`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 500:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `search_images`, must be a value less than or equal to `500`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `search_images`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'people_number' in params and params['people_number'] > 4:  # noqa: E501
            raise ValueError("Invalid value for parameter `people_number` when calling `search_images`, must be a value less than or equal to `4`")  # noqa: E501
        if 'people_number' in params and params['people_number'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `people_number` when calling `search_images`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'added_date' in params:
            query_params.append(('added_date', params['added_date']))  # noqa: E501
        if 'added_date_start' in params:
            query_params.append(('added_date_start', params['added_date_start']))  # noqa: E501
        if 'added_date_end' in params:
            query_params.append(('added_date_end', params['added_date_end']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'contributor' in params:
            query_params.append(('contributor', params['contributor']))  # noqa: E501
            collection_formats['contributor'] = 'multi'  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'height_from' in params:
            query_params.append(('height_from', params['height_from']))  # noqa: E501
        if 'height_to' in params:
            query_params.append(('height_to', params['height_to']))  # noqa: E501
        if 'image_type' in params:
            query_params.append(('image_type', params['image_type']))  # noqa: E501
            collection_formats['image_type'] = 'multi'  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'license' in params:
            query_params.append(('license', params['license']))  # noqa: E501
            collection_formats['license'] = 'multi'  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
            collection_formats['model'] = 'multi'  # noqa: E501
        if 'orientation' in params:
            query_params.append(('orientation', params['orientation']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'people_model_released' in params:
            query_params.append(('people_model_released', params['people_model_released']))  # noqa: E501
        if 'people_age' in params:
            query_params.append(('people_age', params['people_age']))  # noqa: E501
        if 'people_ethnicity' in params:
            query_params.append(('people_ethnicity', params['people_ethnicity']))  # noqa: E501
        if 'people_gender' in params:
            query_params.append(('people_gender', params['people_gender']))  # noqa: E501
        if 'people_number' in params:
            query_params.append(('people_number', params['people_number']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'safe' in params:
            query_params.append(('safe', params['safe']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'spellcheck_query' in params:
            query_params.append(('spellcheck_query', params['spellcheck_query']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'width_from' in params:
            query_params.append(('width_from', params['width_from']))  # noqa: E501
        if 'width_to' in params:
            query_params.append(('width_to', params['width_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_ephemeral_image(self, body, **kwargs):  # noqa: E501
        """Upload images  # noqa: E501

        This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_ephemeral_image(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageCreateRequest body: The image data in JPEG or PNG format (required)
        :return: ImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_ephemeral_image_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_ephemeral_image_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def upload_ephemeral_image_with_http_info(self, body, **kwargs):  # noqa: E501
        """Upload images  # noqa: E501

        This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_ephemeral_image_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageCreateRequest body: The image data in JPEG or PNG format (required)
        :return: ImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_ephemeral_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_ephemeral_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
