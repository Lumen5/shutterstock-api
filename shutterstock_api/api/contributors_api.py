# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from shutterstock_api.api_client import ApiClient


class ContributorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_contributor(self, contributor_id, **kwargs):  # noqa: E501
        """Get details about a single contributor  # noqa: E501

        This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor(contributor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :return: ContributorProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contributor_with_http_info(contributor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contributor_with_http_info(contributor_id, **kwargs)  # noqa: E501
            return data

    def get_contributor_with_http_info(self, contributor_id, **kwargs):  # noqa: E501
        """Get details about a single contributor  # noqa: E501

        This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_with_http_info(contributor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :return: ContributorProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contributor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contributor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contributor_id' is set
        if ('contributor_id' not in params or
                params['contributor_id'] is None):
            raise ValueError("Missing the required parameter `contributor_id` when calling `get_contributor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contributor_id' in params:
            path_params['contributor_id'] = params['contributor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/contributors/{contributor_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContributorProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contributor_collection_items(self, contributor_id, id, **kwargs):  # noqa: E501
        """Get the items in contributors' collections  # noqa: E501

        This endpoint lists the IDs of items in a contributor's collection and the date that each was added.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_collection_items(contributor_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :param str id: Collection ID that belongs to the contributor (required)
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str sort: Sort order
        :return: CollectionItemDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contributor_collection_items_with_http_info(contributor_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contributor_collection_items_with_http_info(contributor_id, id, **kwargs)  # noqa: E501
            return data

    def get_contributor_collection_items_with_http_info(self, contributor_id, id, **kwargs):  # noqa: E501
        """Get the items in contributors' collections  # noqa: E501

        This endpoint lists the IDs of items in a contributor's collection and the date that each was added.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_collection_items_with_http_info(contributor_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :param str id: Collection ID that belongs to the contributor (required)
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str sort: Sort order
        :return: CollectionItemDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contributor_id', 'id', 'page', 'per_page', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contributor_collection_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contributor_id' is set
        if ('contributor_id' not in params or
                params['contributor_id'] is None):
            raise ValueError("Missing the required parameter `contributor_id` when calling `get_contributor_collection_items`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_contributor_collection_items`")  # noqa: E501

        if 'page' in params and params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_contributor_collection_items`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in params and params['per_page'] > 50:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_contributor_collection_items`, must be a value less than or equal to `50`")  # noqa: E501
        if 'per_page' in params and params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_contributor_collection_items`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contributor_id' in params:
            path_params['contributor_id'] = params['contributor_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/contributors/{contributor_id}/collections/{id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionItemDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contributor_collections(self, contributor_id, id, **kwargs):  # noqa: E501
        """Get details about contributors' collections  # noqa: E501

        This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /contributors/{contributor_id}/collections/{id}/items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_collections(contributor_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :param str id: Collection ID that belongs to the contributor (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contributor_collections_with_http_info(contributor_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contributor_collections_with_http_info(contributor_id, id, **kwargs)  # noqa: E501
            return data

    def get_contributor_collections_with_http_info(self, contributor_id, id, **kwargs):  # noqa: E501
        """Get details about contributors' collections  # noqa: E501

        This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /contributors/{contributor_id}/collections/{id}/items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_collections_with_http_info(contributor_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :param str id: Collection ID that belongs to the contributor (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contributor_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contributor_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contributor_id' is set
        if ('contributor_id' not in params or
                params['contributor_id'] is None):
            raise ValueError("Missing the required parameter `contributor_id` when calling `get_contributor_collections`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_contributor_collections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contributor_id' in params:
            path_params['contributor_id'] = params['contributor_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/contributors/{contributor_id}/collections/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contributor_collections_list(self, contributor_id, **kwargs):  # noqa: E501
        """List contributors' collections  # noqa: E501

        This endpoint lists collections based on contributor ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_collections_list(contributor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :param str sort: Sort order
        :return: CollectionDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contributor_collections_list_with_http_info(contributor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contributor_collections_list_with_http_info(contributor_id, **kwargs)  # noqa: E501
            return data

    def get_contributor_collections_list_with_http_info(self, contributor_id, **kwargs):  # noqa: E501
        """List contributors' collections  # noqa: E501

        This endpoint lists collections based on contributor ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_collections_list_with_http_info(contributor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contributor_id: Contributor ID (required)
        :param str sort: Sort order
        :return: CollectionDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contributor_id', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contributor_collections_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contributor_id' is set
        if ('contributor_id' not in params or
                params['contributor_id'] is None):
            raise ValueError("Missing the required parameter `contributor_id` when calling `get_contributor_collections_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contributor_id' in params:
            path_params['contributor_id'] = params['contributor_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/contributors/{contributor_id}/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contributor_list(self, id, **kwargs):  # noqa: E501
        """Get details about multiple contributors  # noqa: E501

        This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: One or more contributor IDs (required)
        :return: ContributorProfileDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contributor_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contributor_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_contributor_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details about multiple contributors  # noqa: E501

        This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contributor_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: One or more contributor IDs (required)
        :return: ContributorProfileDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contributor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_contributor_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/contributors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContributorProfileDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
