# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LicenseRequestMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'geo_location': 'str',
        'number_viewed': 'str',
        'search_term': 'str'
    }

    attribute_map = {
        'customer_id': 'customer_ID',
        'geo_location': 'geo_location',
        'number_viewed': 'number_viewed',
        'search_term': 'search_term'
    }

    def __init__(self, customer_id=None, geo_location=None, number_viewed=None, search_term=None):  # noqa: E501
        """LicenseRequestMetadata - a model defined in Swagger"""  # noqa: E501

        self._customer_id = None
        self._geo_location = None
        self._number_viewed = None
        self._search_term = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if geo_location is not None:
            self.geo_location = geo_location
        if number_viewed is not None:
            self.number_viewed = number_viewed
        if search_term is not None:
            self.search_term = search_term

    @property
    def customer_id(self):
        """Gets the customer_id of this LicenseRequestMetadata.  # noqa: E501

        The ID of a revenue-sharing partner's customer  # noqa: E501

        :return: The customer_id of this LicenseRequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this LicenseRequestMetadata.

        The ID of a revenue-sharing partner's customer  # noqa: E501

        :param customer_id: The customer_id of this LicenseRequestMetadata.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def geo_location(self):
        """Gets the geo_location of this LicenseRequestMetadata.  # noqa: E501

        The customer's location  # noqa: E501

        :return: The geo_location of this LicenseRequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this LicenseRequestMetadata.

        The customer's location  # noqa: E501

        :param geo_location: The geo_location of this LicenseRequestMetadata.  # noqa: E501
        :type: str
        """

        self._geo_location = geo_location

    @property
    def number_viewed(self):
        """Gets the number_viewed of this LicenseRequestMetadata.  # noqa: E501

        How many pieces of media the customer viewed  # noqa: E501

        :return: The number_viewed of this LicenseRequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._number_viewed

    @number_viewed.setter
    def number_viewed(self, number_viewed):
        """Sets the number_viewed of this LicenseRequestMetadata.

        How many pieces of media the customer viewed  # noqa: E501

        :param number_viewed: The number_viewed of this LicenseRequestMetadata.  # noqa: E501
        :type: str
        """

        self._number_viewed = number_viewed

    @property
    def search_term(self):
        """Gets the search_term of this LicenseRequestMetadata.  # noqa: E501

        The search term that the customer used  # noqa: E501

        :return: The search_term of this LicenseRequestMetadata.  # noqa: E501
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this LicenseRequestMetadata.

        The search term that the customer used  # noqa: E501

        :param search_term: The search_term of this LicenseRequestMetadata.  # noqa: E501
        :type: str
        """

        self._search_term = search_term

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseRequestMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseRequestMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
