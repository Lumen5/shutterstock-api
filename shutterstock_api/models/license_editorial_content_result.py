# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shutterstock_api.models.url import Url  # noqa: F401,E501


class LicenseEditorialContentResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allotment_charge': 'int',
        'download': 'Url',
        'editorial_id': 'str',
        'error': 'str'
    }

    attribute_map = {
        'allotment_charge': 'allotment_charge',
        'download': 'download',
        'editorial_id': 'editorial_id',
        'error': 'error'
    }

    def __init__(self, allotment_charge=None, download=None, editorial_id=None, error=None):  # noqa: E501
        """LicenseEditorialContentResult - a model defined in Swagger"""  # noqa: E501

        self._allotment_charge = None
        self._download = None
        self._editorial_id = None
        self._error = None
        self.discriminator = None

        if allotment_charge is not None:
            self.allotment_charge = allotment_charge
        if download is not None:
            self.download = download
        self.editorial_id = editorial_id
        if error is not None:
            self.error = error

    @property
    def allotment_charge(self):
        """Gets the allotment_charge of this LicenseEditorialContentResult.  # noqa: E501

        For pre-paid plans, how many allotments were used for the item license  # noqa: E501

        :return: The allotment_charge of this LicenseEditorialContentResult.  # noqa: E501
        :rtype: int
        """
        return self._allotment_charge

    @allotment_charge.setter
    def allotment_charge(self, allotment_charge):
        """Sets the allotment_charge of this LicenseEditorialContentResult.

        For pre-paid plans, how many allotments were used for the item license  # noqa: E501

        :param allotment_charge: The allotment_charge of this LicenseEditorialContentResult.  # noqa: E501
        :type: int
        """

        self._allotment_charge = allotment_charge

    @property
    def download(self):
        """Gets the download of this LicenseEditorialContentResult.  # noqa: E501

        Information that is needed to download the image  # noqa: E501

        :return: The download of this LicenseEditorialContentResult.  # noqa: E501
        :rtype: Url
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this LicenseEditorialContentResult.

        Information that is needed to download the image  # noqa: E501

        :param download: The download of this LicenseEditorialContentResult.  # noqa: E501
        :type: Url
        """

        self._download = download

    @property
    def editorial_id(self):
        """Gets the editorial_id of this LicenseEditorialContentResult.  # noqa: E501

        Editorial ID  # noqa: E501

        :return: The editorial_id of this LicenseEditorialContentResult.  # noqa: E501
        :rtype: str
        """
        return self._editorial_id

    @editorial_id.setter
    def editorial_id(self, editorial_id):
        """Sets the editorial_id of this LicenseEditorialContentResult.

        Editorial ID  # noqa: E501

        :param editorial_id: The editorial_id of this LicenseEditorialContentResult.  # noqa: E501
        :type: str
        """
        if editorial_id is None:
            raise ValueError("Invalid value for `editorial_id`, must not be `None`")  # noqa: E501

        self._editorial_id = editorial_id

    @property
    def error(self):
        """Gets the error of this LicenseEditorialContentResult.  # noqa: E501


        :return: The error of this LicenseEditorialContentResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this LicenseEditorialContentResult.


        :param error: The error of this LicenseEditorialContentResult.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseEditorialContentResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseEditorialContentResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
