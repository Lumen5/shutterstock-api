# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shutterstock_api.models.image import Image  # noqa: F401,E501


class ImageSearchResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[Image]',
        'message': 'str',
        'page': 'int',
        'per_page': 'int',
        'search_id': 'str',
        'spellcheck_info': 'object',
        'total_count': 'int'
    }

    attribute_map = {
        'data': 'data',
        'message': 'message',
        'page': 'page',
        'per_page': 'per_page',
        'search_id': 'search_id',
        'spellcheck_info': 'spellcheck_info',
        'total_count': 'total_count'
    }

    def __init__(self, data=None, message=None, page=None, per_page=None, search_id=None, spellcheck_info=None, total_count=None):  # noqa: E501
        """ImageSearchResults - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._message = None
        self._page = None
        self._per_page = None
        self._search_id = None
        self._spellcheck_info = None
        self._total_count = None
        self.discriminator = None

        self.data = data
        if message is not None:
            self.message = message
        if page is not None:
            self.page = page
        if per_page is not None:
            self.per_page = per_page
        self.search_id = search_id
        if spellcheck_info is not None:
            self.spellcheck_info = spellcheck_info
        self.total_count = total_count

    @property
    def data(self):
        """Gets the data of this ImageSearchResults.  # noqa: E501

        List of images  # noqa: E501

        :return: The data of this ImageSearchResults.  # noqa: E501
        :rtype: list[Image]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ImageSearchResults.

        List of images  # noqa: E501

        :param data: The data of this ImageSearchResults.  # noqa: E501
        :type: list[Image]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def message(self):
        """Gets the message of this ImageSearchResults.  # noqa: E501

        Server-generated message, if any  # noqa: E501

        :return: The message of this ImageSearchResults.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ImageSearchResults.

        Server-generated message, if any  # noqa: E501

        :param message: The message of this ImageSearchResults.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def page(self):
        """Gets the page of this ImageSearchResults.  # noqa: E501

        Current page that is returned  # noqa: E501

        :return: The page of this ImageSearchResults.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ImageSearchResults.

        Current page that is returned  # noqa: E501

        :param page: The page of this ImageSearchResults.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this ImageSearchResults.  # noqa: E501

        Number of results per page  # noqa: E501

        :return: The per_page of this ImageSearchResults.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this ImageSearchResults.

        Number of results per page  # noqa: E501

        :param per_page: The per_page of this ImageSearchResults.  # noqa: E501
        :type: int
        """

        self._per_page = per_page

    @property
    def search_id(self):
        """Gets the search_id of this ImageSearchResults.  # noqa: E501

        Unique identifier for the search request  # noqa: E501

        :return: The search_id of this ImageSearchResults.  # noqa: E501
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id):
        """Sets the search_id of this ImageSearchResults.

        Unique identifier for the search request  # noqa: E501

        :param search_id: The search_id of this ImageSearchResults.  # noqa: E501
        :type: str
        """
        if search_id is None:
            raise ValueError("Invalid value for `search_id`, must not be `None`")  # noqa: E501

        self._search_id = search_id

    @property
    def spellcheck_info(self):
        """Gets the spellcheck_info of this ImageSearchResults.  # noqa: E501

        Returns information if search phrase has potentially been mistyped or another query would lead to better search results  # noqa: E501

        :return: The spellcheck_info of this ImageSearchResults.  # noqa: E501
        :rtype: object
        """
        return self._spellcheck_info

    @spellcheck_info.setter
    def spellcheck_info(self, spellcheck_info):
        """Sets the spellcheck_info of this ImageSearchResults.

        Returns information if search phrase has potentially been mistyped or another query would lead to better search results  # noqa: E501

        :param spellcheck_info: The spellcheck_info of this ImageSearchResults.  # noqa: E501
        :type: object
        """

        self._spellcheck_info = spellcheck_info

    @property
    def total_count(self):
        """Gets the total_count of this ImageSearchResults.  # noqa: E501

        Total count of all results across all pages  # noqa: E501

        :return: The total_count of this ImageSearchResults.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ImageSearchResults.

        Total count of all results across all pages  # noqa: E501

        :param total_count: The total_count of this ImageSearchResults.  # noqa: E501
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageSearchResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageSearchResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
