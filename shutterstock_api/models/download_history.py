# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shutterstock_api.models.download_history_media_details import DownloadHistoryMediaDetails  # noqa: F401,E501
from shutterstock_api.models.download_history_user_details import DownloadHistoryUserDetails  # noqa: F401,E501


class DownloadHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio': 'DownloadHistoryMediaDetails',
        'download_time': 'datetime',
        'id': 'str',
        'image': 'DownloadHistoryMediaDetails',
        'is_downloadable': 'bool',
        'license': 'str',
        'metadata': 'object',
        'subscription_id': 'str',
        'user': 'DownloadHistoryUserDetails',
        'video': 'DownloadHistoryMediaDetails'
    }

    attribute_map = {
        'audio': 'audio',
        'download_time': 'download_time',
        'id': 'id',
        'image': 'image',
        'is_downloadable': 'is_downloadable',
        'license': 'license',
        'metadata': 'metadata',
        'subscription_id': 'subscription_id',
        'user': 'user',
        'video': 'video'
    }

    def __init__(self, audio=None, download_time=None, id=None, image=None, is_downloadable=None, license=None, metadata=None, subscription_id=None, user=None, video=None):  # noqa: E501
        """DownloadHistory - a model defined in Swagger"""  # noqa: E501

        self._audio = None
        self._download_time = None
        self._id = None
        self._image = None
        self._is_downloadable = None
        self._license = None
        self._metadata = None
        self._subscription_id = None
        self._user = None
        self._video = None
        self.discriminator = None

        if audio is not None:
            self.audio = audio
        self.download_time = download_time
        self.id = id
        if image is not None:
            self.image = image
        if is_downloadable is not None:
            self.is_downloadable = is_downloadable
        self.license = license
        if metadata is not None:
            self.metadata = metadata
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if user is not None:
            self.user = user
        if video is not None:
            self.video = video

    @property
    def audio(self):
        """Gets the audio of this DownloadHistory.  # noqa: E501


        :return: The audio of this DownloadHistory.  # noqa: E501
        :rtype: DownloadHistoryMediaDetails
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this DownloadHistory.


        :param audio: The audio of this DownloadHistory.  # noqa: E501
        :type: DownloadHistoryMediaDetails
        """

        self._audio = audio

    @property
    def download_time(self):
        """Gets the download_time of this DownloadHistory.  # noqa: E501

        Date the media was downloaded the first time, in the format YYYY-MM-DDThh:mm:ssZ  # noqa: E501

        :return: The download_time of this DownloadHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._download_time

    @download_time.setter
    def download_time(self, download_time):
        """Sets the download_time of this DownloadHistory.

        Date the media was downloaded the first time, in the format YYYY-MM-DDThh:mm:ssZ  # noqa: E501

        :param download_time: The download_time of this DownloadHistory.  # noqa: E501
        :type: datetime
        """
        if download_time is None:
            raise ValueError("Invalid value for `download_time`, must not be `None`")  # noqa: E501

        self._download_time = download_time

    @property
    def id(self):
        """Gets the id of this DownloadHistory.  # noqa: E501

        ID of the download  # noqa: E501

        :return: The id of this DownloadHistory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DownloadHistory.

        ID of the download  # noqa: E501

        :param id: The id of this DownloadHistory.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image(self):
        """Gets the image of this DownloadHistory.  # noqa: E501


        :return: The image of this DownloadHistory.  # noqa: E501
        :rtype: DownloadHistoryMediaDetails
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DownloadHistory.


        :param image: The image of this DownloadHistory.  # noqa: E501
        :type: DownloadHistoryMediaDetails
        """

        self._image = image

    @property
    def is_downloadable(self):
        """Gets the is_downloadable of this DownloadHistory.  # noqa: E501

        Specifies if the media is downloadable via its respective downloads endpoint  # noqa: E501

        :return: The is_downloadable of this DownloadHistory.  # noqa: E501
        :rtype: bool
        """
        return self._is_downloadable

    @is_downloadable.setter
    def is_downloadable(self, is_downloadable):
        """Sets the is_downloadable of this DownloadHistory.

        Specifies if the media is downloadable via its respective downloads endpoint  # noqa: E501

        :param is_downloadable: The is_downloadable of this DownloadHistory.  # noqa: E501
        :type: bool
        """

        self._is_downloadable = is_downloadable

    @property
    def license(self):
        """Gets the license of this DownloadHistory.  # noqa: E501

        The name of the license of this download  # noqa: E501

        :return: The license of this DownloadHistory.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this DownloadHistory.

        The name of the license of this download  # noqa: E501

        :param license: The license of this DownloadHistory.  # noqa: E501
        :type: str
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")  # noqa: E501

        self._license = license

    @property
    def metadata(self):
        """Gets the metadata of this DownloadHistory.  # noqa: E501

        The metadata that was passed in the original licensing request  # noqa: E501

        :return: The metadata of this DownloadHistory.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DownloadHistory.

        The metadata that was passed in the original licensing request  # noqa: E501

        :param metadata: The metadata of this DownloadHistory.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def subscription_id(self):
        """Gets the subscription_id of this DownloadHistory.  # noqa: E501

        ID of the subscription used to perform this download  # noqa: E501

        :return: The subscription_id of this DownloadHistory.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this DownloadHistory.

        ID of the subscription used to perform this download  # noqa: E501

        :param subscription_id: The subscription_id of this DownloadHistory.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def user(self):
        """Gets the user of this DownloadHistory.  # noqa: E501


        :return: The user of this DownloadHistory.  # noqa: E501
        :rtype: DownloadHistoryUserDetails
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DownloadHistory.


        :param user: The user of this DownloadHistory.  # noqa: E501
        :type: DownloadHistoryUserDetails
        """

        self._user = user

    @property
    def video(self):
        """Gets the video of this DownloadHistory.  # noqa: E501


        :return: The video of this DownloadHistory.  # noqa: E501
        :rtype: DownloadHistoryMediaDetails
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this DownloadHistory.


        :param video: The video of this DownloadHistory.  # noqa: E501
        :type: DownloadHistoryMediaDetails
        """

        self._video = video

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DownloadHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DownloadHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
