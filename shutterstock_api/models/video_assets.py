# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shutterstock_api.models.url import Url  # noqa: F401,E501
from shutterstock_api.models.urls import Urls  # noqa: F401,E501
from shutterstock_api.models.video_size_details import VideoSizeDetails  # noqa: F401,E501


class VideoAssets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_4k': 'VideoSizeDetails',
        'hd': 'VideoSizeDetails',
        'preview_jpg': 'Url',
        'preview_mp4': 'Url',
        'preview_webm': 'Url',
        'sd': 'VideoSizeDetails',
        'thumb_jpg': 'Url',
        'thumb_jpgs': 'Urls',
        'thumb_mp4': 'Url',
        'thumb_webm': 'Url',
        'web': 'VideoSizeDetails'
    }

    attribute_map = {
        '_4k': '4k',
        'hd': 'hd',
        'preview_jpg': 'preview_jpg',
        'preview_mp4': 'preview_mp4',
        'preview_webm': 'preview_webm',
        'sd': 'sd',
        'thumb_jpg': 'thumb_jpg',
        'thumb_jpgs': 'thumb_jpgs',
        'thumb_mp4': 'thumb_mp4',
        'thumb_webm': 'thumb_webm',
        'web': 'web'
    }

    def __init__(self, _4k=None, hd=None, preview_jpg=None, preview_mp4=None, preview_webm=None, sd=None, thumb_jpg=None, thumb_jpgs=None, thumb_mp4=None, thumb_webm=None, web=None):  # noqa: E501
        """VideoAssets - a model defined in Swagger"""  # noqa: E501

        self.__4k = None
        self._hd = None
        self._preview_jpg = None
        self._preview_mp4 = None
        self._preview_webm = None
        self._sd = None
        self._thumb_jpg = None
        self._thumb_jpgs = None
        self._thumb_mp4 = None
        self._thumb_webm = None
        self._web = None
        self.discriminator = None

        if _4k is not None:
            self._4k = _4k
        if hd is not None:
            self.hd = hd
        if preview_jpg is not None:
            self.preview_jpg = preview_jpg
        if preview_mp4 is not None:
            self.preview_mp4 = preview_mp4
        if preview_webm is not None:
            self.preview_webm = preview_webm
        if sd is not None:
            self.sd = sd
        if thumb_jpg is not None:
            self.thumb_jpg = thumb_jpg
        if thumb_jpgs is not None:
            self.thumb_jpgs = thumb_jpgs
        if thumb_mp4 is not None:
            self.thumb_mp4 = thumb_mp4
        if thumb_webm is not None:
            self.thumb_webm = thumb_webm
        if web is not None:
            self.web = web

    @property
    def _4k(self):
        """Gets the _4k of this VideoAssets.  # noqa: E501


        :return: The _4k of this VideoAssets.  # noqa: E501
        :rtype: VideoSizeDetails
        """
        return self.__4k

    @_4k.setter
    def _4k(self, _4k):
        """Sets the _4k of this VideoAssets.


        :param _4k: The _4k of this VideoAssets.  # noqa: E501
        :type: VideoSizeDetails
        """

        self.__4k = _4k

    @property
    def hd(self):
        """Gets the hd of this VideoAssets.  # noqa: E501


        :return: The hd of this VideoAssets.  # noqa: E501
        :rtype: VideoSizeDetails
        """
        return self._hd

    @hd.setter
    def hd(self, hd):
        """Sets the hd of this VideoAssets.


        :param hd: The hd of this VideoAssets.  # noqa: E501
        :type: VideoSizeDetails
        """

        self._hd = hd

    @property
    def preview_jpg(self):
        """Gets the preview_jpg of this VideoAssets.  # noqa: E501


        :return: The preview_jpg of this VideoAssets.  # noqa: E501
        :rtype: Url
        """
        return self._preview_jpg

    @preview_jpg.setter
    def preview_jpg(self, preview_jpg):
        """Sets the preview_jpg of this VideoAssets.


        :param preview_jpg: The preview_jpg of this VideoAssets.  # noqa: E501
        :type: Url
        """

        self._preview_jpg = preview_jpg

    @property
    def preview_mp4(self):
        """Gets the preview_mp4 of this VideoAssets.  # noqa: E501


        :return: The preview_mp4 of this VideoAssets.  # noqa: E501
        :rtype: Url
        """
        return self._preview_mp4

    @preview_mp4.setter
    def preview_mp4(self, preview_mp4):
        """Sets the preview_mp4 of this VideoAssets.


        :param preview_mp4: The preview_mp4 of this VideoAssets.  # noqa: E501
        :type: Url
        """

        self._preview_mp4 = preview_mp4

    @property
    def preview_webm(self):
        """Gets the preview_webm of this VideoAssets.  # noqa: E501


        :return: The preview_webm of this VideoAssets.  # noqa: E501
        :rtype: Url
        """
        return self._preview_webm

    @preview_webm.setter
    def preview_webm(self, preview_webm):
        """Sets the preview_webm of this VideoAssets.


        :param preview_webm: The preview_webm of this VideoAssets.  # noqa: E501
        :type: Url
        """

        self._preview_webm = preview_webm

    @property
    def sd(self):
        """Gets the sd of this VideoAssets.  # noqa: E501


        :return: The sd of this VideoAssets.  # noqa: E501
        :rtype: VideoSizeDetails
        """
        return self._sd

    @sd.setter
    def sd(self, sd):
        """Sets the sd of this VideoAssets.


        :param sd: The sd of this VideoAssets.  # noqa: E501
        :type: VideoSizeDetails
        """

        self._sd = sd

    @property
    def thumb_jpg(self):
        """Gets the thumb_jpg of this VideoAssets.  # noqa: E501


        :return: The thumb_jpg of this VideoAssets.  # noqa: E501
        :rtype: Url
        """
        return self._thumb_jpg

    @thumb_jpg.setter
    def thumb_jpg(self, thumb_jpg):
        """Sets the thumb_jpg of this VideoAssets.


        :param thumb_jpg: The thumb_jpg of this VideoAssets.  # noqa: E501
        :type: Url
        """

        self._thumb_jpg = thumb_jpg

    @property
    def thumb_jpgs(self):
        """Gets the thumb_jpgs of this VideoAssets.  # noqa: E501


        :return: The thumb_jpgs of this VideoAssets.  # noqa: E501
        :rtype: Urls
        """
        return self._thumb_jpgs

    @thumb_jpgs.setter
    def thumb_jpgs(self, thumb_jpgs):
        """Sets the thumb_jpgs of this VideoAssets.


        :param thumb_jpgs: The thumb_jpgs of this VideoAssets.  # noqa: E501
        :type: Urls
        """

        self._thumb_jpgs = thumb_jpgs

    @property
    def thumb_mp4(self):
        """Gets the thumb_mp4 of this VideoAssets.  # noqa: E501


        :return: The thumb_mp4 of this VideoAssets.  # noqa: E501
        :rtype: Url
        """
        return self._thumb_mp4

    @thumb_mp4.setter
    def thumb_mp4(self, thumb_mp4):
        """Sets the thumb_mp4 of this VideoAssets.


        :param thumb_mp4: The thumb_mp4 of this VideoAssets.  # noqa: E501
        :type: Url
        """

        self._thumb_mp4 = thumb_mp4

    @property
    def thumb_webm(self):
        """Gets the thumb_webm of this VideoAssets.  # noqa: E501


        :return: The thumb_webm of this VideoAssets.  # noqa: E501
        :rtype: Url
        """
        return self._thumb_webm

    @thumb_webm.setter
    def thumb_webm(self, thumb_webm):
        """Sets the thumb_webm of this VideoAssets.


        :param thumb_webm: The thumb_webm of this VideoAssets.  # noqa: E501
        :type: Url
        """

        self._thumb_webm = thumb_webm

    @property
    def web(self):
        """Gets the web of this VideoAssets.  # noqa: E501


        :return: The web of this VideoAssets.  # noqa: E501
        :rtype: VideoSizeDetails
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this VideoAssets.


        :param web: The web of this VideoAssets.  # noqa: E501
        :type: VideoSizeDetails
        """

        self._web = web

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoAssets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoAssets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
