# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shutterstock_api.models.price import Price  # noqa: F401,E501
from shutterstock_api.models.subscription_metadata import SubscriptionMetadata  # noqa: F401,E501


class LicenseAgreement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'license': 'str',
        'media_type': 'str',
        'metadata': 'SubscriptionMetadata',
        'price_per_download': 'Price'
    }

    attribute_map = {
        'description': 'description',
        'license': 'license',
        'media_type': 'media_type',
        'metadata': 'metadata',
        'price_per_download': 'price_per_download'
    }

    def __init__(self, description=None, license=None, media_type=None, metadata=None, price_per_download=None):  # noqa: E501
        """LicenseAgreement - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._license = None
        self._media_type = None
        self._metadata = None
        self._price_per_download = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if license is not None:
            self.license = license
        if media_type is not None:
            self.media_type = media_type
        if metadata is not None:
            self.metadata = metadata
        if price_per_download is not None:
            self.price_per_download = price_per_download

    @property
    def description(self):
        """Gets the description of this LicenseAgreement.  # noqa: E501


        :return: The description of this LicenseAgreement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LicenseAgreement.


        :param description: The description of this LicenseAgreement.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def license(self):
        """Gets the license of this LicenseAgreement.  # noqa: E501


        :return: The license of this LicenseAgreement.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this LicenseAgreement.


        :param license: The license of this LicenseAgreement.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def media_type(self):
        """Gets the media_type of this LicenseAgreement.  # noqa: E501

        Type of media, such as image or video  # noqa: E501

        :return: The media_type of this LicenseAgreement.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this LicenseAgreement.

        Type of media, such as image or video  # noqa: E501

        :param media_type: The media_type of this LicenseAgreement.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def metadata(self):
        """Gets the metadata of this LicenseAgreement.  # noqa: E501


        :return: The metadata of this LicenseAgreement.  # noqa: E501
        :rtype: SubscriptionMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LicenseAgreement.


        :param metadata: The metadata of this LicenseAgreement.  # noqa: E501
        :type: SubscriptionMetadata
        """

        self._metadata = metadata

    @property
    def price_per_download(self):
        """Gets the price_per_download of this LicenseAgreement.  # noqa: E501


        :return: The price_per_download of this LicenseAgreement.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_download

    @price_per_download.setter
    def price_per_download(self, price_per_download):
        """Sets the price_per_download of this LicenseAgreement.


        :param price_per_download: The price_per_download of this LicenseAgreement.  # noqa: E501
        :type: Price
        """

        self._price_per_download = price_per_download

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseAgreement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseAgreement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
