# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shutterstock_api.models.image_size_details import ImageSizeDetails  # noqa: F401,E501
from shutterstock_api.models.thumbnail import Thumbnail  # noqa: F401,E501


class ImageAssets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'huge_jpg': 'ImageSizeDetails',
        'huge_tiff': 'ImageSizeDetails',
        'large_thumb': 'Thumbnail',
        'medium_jpg': 'ImageSizeDetails',
        'preview': 'Thumbnail',
        'preview_1000': 'Thumbnail',
        'preview_1500': 'Thumbnail',
        'small_jpg': 'ImageSizeDetails',
        'small_thumb': 'Thumbnail',
        'supersize_jpg': 'ImageSizeDetails',
        'supersize_tiff': 'ImageSizeDetails',
        'vector_eps': 'ImageSizeDetails'
    }

    attribute_map = {
        'huge_jpg': 'huge_jpg',
        'huge_tiff': 'huge_tiff',
        'large_thumb': 'large_thumb',
        'medium_jpg': 'medium_jpg',
        'preview': 'preview',
        'preview_1000': 'preview_1000',
        'preview_1500': 'preview_1500',
        'small_jpg': 'small_jpg',
        'small_thumb': 'small_thumb',
        'supersize_jpg': 'supersize_jpg',
        'supersize_tiff': 'supersize_tiff',
        'vector_eps': 'vector_eps'
    }

    def __init__(self, huge_jpg=None, huge_tiff=None, large_thumb=None, medium_jpg=None, preview=None, preview_1000=None, preview_1500=None, small_jpg=None, small_thumb=None, supersize_jpg=None, supersize_tiff=None, vector_eps=None):  # noqa: E501
        """ImageAssets - a model defined in Swagger"""  # noqa: E501

        self._huge_jpg = None
        self._huge_tiff = None
        self._large_thumb = None
        self._medium_jpg = None
        self._preview = None
        self._preview_1000 = None
        self._preview_1500 = None
        self._small_jpg = None
        self._small_thumb = None
        self._supersize_jpg = None
        self._supersize_tiff = None
        self._vector_eps = None
        self.discriminator = None

        if huge_jpg is not None:
            self.huge_jpg = huge_jpg
        if huge_tiff is not None:
            self.huge_tiff = huge_tiff
        if large_thumb is not None:
            self.large_thumb = large_thumb
        if medium_jpg is not None:
            self.medium_jpg = medium_jpg
        if preview is not None:
            self.preview = preview
        if preview_1000 is not None:
            self.preview_1000 = preview_1000
        if preview_1500 is not None:
            self.preview_1500 = preview_1500
        if small_jpg is not None:
            self.small_jpg = small_jpg
        if small_thumb is not None:
            self.small_thumb = small_thumb
        if supersize_jpg is not None:
            self.supersize_jpg = supersize_jpg
        if supersize_tiff is not None:
            self.supersize_tiff = supersize_tiff
        if vector_eps is not None:
            self.vector_eps = vector_eps

    @property
    def huge_jpg(self):
        """Gets the huge_jpg of this ImageAssets.  # noqa: E501


        :return: The huge_jpg of this ImageAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._huge_jpg

    @huge_jpg.setter
    def huge_jpg(self, huge_jpg):
        """Sets the huge_jpg of this ImageAssets.


        :param huge_jpg: The huge_jpg of this ImageAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._huge_jpg = huge_jpg

    @property
    def huge_tiff(self):
        """Gets the huge_tiff of this ImageAssets.  # noqa: E501


        :return: The huge_tiff of this ImageAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._huge_tiff

    @huge_tiff.setter
    def huge_tiff(self, huge_tiff):
        """Sets the huge_tiff of this ImageAssets.


        :param huge_tiff: The huge_tiff of this ImageAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._huge_tiff = huge_tiff

    @property
    def large_thumb(self):
        """Gets the large_thumb of this ImageAssets.  # noqa: E501


        :return: The large_thumb of this ImageAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._large_thumb

    @large_thumb.setter
    def large_thumb(self, large_thumb):
        """Sets the large_thumb of this ImageAssets.


        :param large_thumb: The large_thumb of this ImageAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._large_thumb = large_thumb

    @property
    def medium_jpg(self):
        """Gets the medium_jpg of this ImageAssets.  # noqa: E501


        :return: The medium_jpg of this ImageAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._medium_jpg

    @medium_jpg.setter
    def medium_jpg(self, medium_jpg):
        """Sets the medium_jpg of this ImageAssets.


        :param medium_jpg: The medium_jpg of this ImageAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._medium_jpg = medium_jpg

    @property
    def preview(self):
        """Gets the preview of this ImageAssets.  # noqa: E501


        :return: The preview of this ImageAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this ImageAssets.


        :param preview: The preview of this ImageAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._preview = preview

    @property
    def preview_1000(self):
        """Gets the preview_1000 of this ImageAssets.  # noqa: E501


        :return: The preview_1000 of this ImageAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._preview_1000

    @preview_1000.setter
    def preview_1000(self, preview_1000):
        """Sets the preview_1000 of this ImageAssets.


        :param preview_1000: The preview_1000 of this ImageAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._preview_1000 = preview_1000

    @property
    def preview_1500(self):
        """Gets the preview_1500 of this ImageAssets.  # noqa: E501


        :return: The preview_1500 of this ImageAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._preview_1500

    @preview_1500.setter
    def preview_1500(self, preview_1500):
        """Sets the preview_1500 of this ImageAssets.


        :param preview_1500: The preview_1500 of this ImageAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._preview_1500 = preview_1500

    @property
    def small_jpg(self):
        """Gets the small_jpg of this ImageAssets.  # noqa: E501


        :return: The small_jpg of this ImageAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._small_jpg

    @small_jpg.setter
    def small_jpg(self, small_jpg):
        """Sets the small_jpg of this ImageAssets.


        :param small_jpg: The small_jpg of this ImageAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._small_jpg = small_jpg

    @property
    def small_thumb(self):
        """Gets the small_thumb of this ImageAssets.  # noqa: E501


        :return: The small_thumb of this ImageAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._small_thumb

    @small_thumb.setter
    def small_thumb(self, small_thumb):
        """Sets the small_thumb of this ImageAssets.


        :param small_thumb: The small_thumb of this ImageAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._small_thumb = small_thumb

    @property
    def supersize_jpg(self):
        """Gets the supersize_jpg of this ImageAssets.  # noqa: E501


        :return: The supersize_jpg of this ImageAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._supersize_jpg

    @supersize_jpg.setter
    def supersize_jpg(self, supersize_jpg):
        """Sets the supersize_jpg of this ImageAssets.


        :param supersize_jpg: The supersize_jpg of this ImageAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._supersize_jpg = supersize_jpg

    @property
    def supersize_tiff(self):
        """Gets the supersize_tiff of this ImageAssets.  # noqa: E501


        :return: The supersize_tiff of this ImageAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._supersize_tiff

    @supersize_tiff.setter
    def supersize_tiff(self, supersize_tiff):
        """Sets the supersize_tiff of this ImageAssets.


        :param supersize_tiff: The supersize_tiff of this ImageAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._supersize_tiff = supersize_tiff

    @property
    def vector_eps(self):
        """Gets the vector_eps of this ImageAssets.  # noqa: E501


        :return: The vector_eps of this ImageAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._vector_eps

    @vector_eps.setter
    def vector_eps(self, vector_eps):
        """Sets the vector_eps of this ImageAssets.


        :param vector_eps: The vector_eps of this ImageAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._vector_eps = vector_eps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageAssets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageAssets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
