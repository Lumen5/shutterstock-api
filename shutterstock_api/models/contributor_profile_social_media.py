# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContributorProfileSocialMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'facebook': 'str',
        'google_plus': 'str',
        'linkedin': 'str',
        'pinterest': 'str',
        'tumblr': 'str',
        'twitter': 'str'
    }

    attribute_map = {
        'facebook': 'facebook',
        'google_plus': 'google_plus',
        'linkedin': 'linkedin',
        'pinterest': 'pinterest',
        'tumblr': 'tumblr',
        'twitter': 'twitter'
    }

    def __init__(self, facebook=None, google_plus=None, linkedin=None, pinterest=None, tumblr=None, twitter=None):  # noqa: E501
        """ContributorProfileSocialMedia - a model defined in Swagger"""  # noqa: E501

        self._facebook = None
        self._google_plus = None
        self._linkedin = None
        self._pinterest = None
        self._tumblr = None
        self._twitter = None
        self.discriminator = None

        if facebook is not None:
            self.facebook = facebook
        if google_plus is not None:
            self.google_plus = google_plus
        if linkedin is not None:
            self.linkedin = linkedin
        if pinterest is not None:
            self.pinterest = pinterest
        if tumblr is not None:
            self.tumblr = tumblr
        if twitter is not None:
            self.twitter = twitter

    @property
    def facebook(self):
        """Gets the facebook of this ContributorProfileSocialMedia.  # noqa: E501

        Facebook link for contributor  # noqa: E501

        :return: The facebook of this ContributorProfileSocialMedia.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this ContributorProfileSocialMedia.

        Facebook link for contributor  # noqa: E501

        :param facebook: The facebook of this ContributorProfileSocialMedia.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def google_plus(self):
        """Gets the google_plus of this ContributorProfileSocialMedia.  # noqa: E501

        Google+ link for contributor  # noqa: E501

        :return: The google_plus of this ContributorProfileSocialMedia.  # noqa: E501
        :rtype: str
        """
        return self._google_plus

    @google_plus.setter
    def google_plus(self, google_plus):
        """Sets the google_plus of this ContributorProfileSocialMedia.

        Google+ link for contributor  # noqa: E501

        :param google_plus: The google_plus of this ContributorProfileSocialMedia.  # noqa: E501
        :type: str
        """

        self._google_plus = google_plus

    @property
    def linkedin(self):
        """Gets the linkedin of this ContributorProfileSocialMedia.  # noqa: E501

        LinkedIn link for contributor  # noqa: E501

        :return: The linkedin of this ContributorProfileSocialMedia.  # noqa: E501
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this ContributorProfileSocialMedia.

        LinkedIn link for contributor  # noqa: E501

        :param linkedin: The linkedin of this ContributorProfileSocialMedia.  # noqa: E501
        :type: str
        """

        self._linkedin = linkedin

    @property
    def pinterest(self):
        """Gets the pinterest of this ContributorProfileSocialMedia.  # noqa: E501

        Pinterest page for contributor  # noqa: E501

        :return: The pinterest of this ContributorProfileSocialMedia.  # noqa: E501
        :rtype: str
        """
        return self._pinterest

    @pinterest.setter
    def pinterest(self, pinterest):
        """Sets the pinterest of this ContributorProfileSocialMedia.

        Pinterest page for contributor  # noqa: E501

        :param pinterest: The pinterest of this ContributorProfileSocialMedia.  # noqa: E501
        :type: str
        """

        self._pinterest = pinterest

    @property
    def tumblr(self):
        """Gets the tumblr of this ContributorProfileSocialMedia.  # noqa: E501

        Tumblr link for contributor  # noqa: E501

        :return: The tumblr of this ContributorProfileSocialMedia.  # noqa: E501
        :rtype: str
        """
        return self._tumblr

    @tumblr.setter
    def tumblr(self, tumblr):
        """Sets the tumblr of this ContributorProfileSocialMedia.

        Tumblr link for contributor  # noqa: E501

        :param tumblr: The tumblr of this ContributorProfileSocialMedia.  # noqa: E501
        :type: str
        """

        self._tumblr = tumblr

    @property
    def twitter(self):
        """Gets the twitter of this ContributorProfileSocialMedia.  # noqa: E501

        Twitter link for contributor  # noqa: E501

        :return: The twitter of this ContributorProfileSocialMedia.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this ContributorProfileSocialMedia.

        Twitter link for contributor  # noqa: E501

        :param twitter: The twitter of this ContributorProfileSocialMedia.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContributorProfileSocialMedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContributorProfileSocialMedia):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
