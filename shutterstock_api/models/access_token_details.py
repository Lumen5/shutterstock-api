# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccessTokenDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'contributor_id': 'str',
        'customer_id': 'str',
        'expires_in': 'int',
        'organization_id': 'str',
        'realm': 'str',
        'scopes': 'list[str]',
        'user_id': 'str',
        'username': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'contributor_id': 'contributor_id',
        'customer_id': 'customer_id',
        'expires_in': 'expires_in',
        'organization_id': 'organization_id',
        'realm': 'realm',
        'scopes': 'scopes',
        'user_id': 'user_id',
        'username': 'username'
    }

    def __init__(self, client_id=None, contributor_id=None, customer_id=None, expires_in=None, organization_id=None, realm=None, scopes=None, user_id=None, username=None):  # noqa: E501
        """AccessTokenDetails - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._contributor_id = None
        self._customer_id = None
        self._expires_in = None
        self._organization_id = None
        self._realm = None
        self._scopes = None
        self._user_id = None
        self._username = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if contributor_id is not None:
            self.contributor_id = contributor_id
        if customer_id is not None:
            self.customer_id = customer_id
        if expires_in is not None:
            self.expires_in = expires_in
        if organization_id is not None:
            self.organization_id = organization_id
        if realm is not None:
            self.realm = realm
        if scopes is not None:
            self.scopes = scopes
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def client_id(self):
        """Gets the client_id of this AccessTokenDetails.  # noqa: E501

        Client ID that is associated with the user  # noqa: E501

        :return: The client_id of this AccessTokenDetails.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AccessTokenDetails.

        Client ID that is associated with the user  # noqa: E501

        :param client_id: The client_id of this AccessTokenDetails.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def contributor_id(self):
        """Gets the contributor_id of this AccessTokenDetails.  # noqa: E501

        Contributor ID that is associated with the user  # noqa: E501

        :return: The contributor_id of this AccessTokenDetails.  # noqa: E501
        :rtype: str
        """
        return self._contributor_id

    @contributor_id.setter
    def contributor_id(self, contributor_id):
        """Sets the contributor_id of this AccessTokenDetails.

        Contributor ID that is associated with the user  # noqa: E501

        :param contributor_id: The contributor_id of this AccessTokenDetails.  # noqa: E501
        :type: str
        """

        self._contributor_id = contributor_id

    @property
    def customer_id(self):
        """Gets the customer_id of this AccessTokenDetails.  # noqa: E501

        Customer ID that is associated with the user  # noqa: E501

        :return: The customer_id of this AccessTokenDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AccessTokenDetails.

        Customer ID that is associated with the user  # noqa: E501

        :param customer_id: The customer_id of this AccessTokenDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def expires_in(self):
        """Gets the expires_in of this AccessTokenDetails.  # noqa: E501

        Number of seconds until the access token expires; no expiration if this value is null  # noqa: E501

        :return: The expires_in of this AccessTokenDetails.  # noqa: E501
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AccessTokenDetails.

        Number of seconds until the access token expires; no expiration if this value is null  # noqa: E501

        :param expires_in: The expires_in of this AccessTokenDetails.  # noqa: E501
        :type: int
        """

        self._expires_in = expires_in

    @property
    def organization_id(self):
        """Gets the organization_id of this AccessTokenDetails.  # noqa: E501

        Organization ID that is associated with the user  # noqa: E501

        :return: The organization_id of this AccessTokenDetails.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this AccessTokenDetails.

        Organization ID that is associated with the user  # noqa: E501

        :param organization_id: The organization_id of this AccessTokenDetails.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def realm(self):
        """Gets the realm of this AccessTokenDetails.  # noqa: E501

        Type of access token  # noqa: E501

        :return: The realm of this AccessTokenDetails.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this AccessTokenDetails.

        Type of access token  # noqa: E501

        :param realm: The realm of this AccessTokenDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["customer", "contributor"]  # noqa: E501
        if realm not in allowed_values:
            raise ValueError(
                "Invalid value for `realm` ({0}), must be one of {1}"  # noqa: E501
                .format(realm, allowed_values)
            )

        self._realm = realm

    @property
    def scopes(self):
        """Gets the scopes of this AccessTokenDetails.  # noqa: E501

        Scopes that this access token provides when used as authentication  # noqa: E501

        :return: The scopes of this AccessTokenDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccessTokenDetails.

        Scopes that this access token provides when used as authentication  # noqa: E501

        :param scopes: The scopes of this AccessTokenDetails.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def user_id(self):
        """Gets the user_id of this AccessTokenDetails.  # noqa: E501

        User ID that is associated with the user  # noqa: E501

        :return: The user_id of this AccessTokenDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessTokenDetails.

        User ID that is associated with the user  # noqa: E501

        :param user_id: The user_id of this AccessTokenDetails.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this AccessTokenDetails.  # noqa: E501

        User name that is associated with the user  # noqa: E501

        :return: The username of this AccessTokenDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AccessTokenDetails.

        User name that is associated with the user  # noqa: E501

        :param username: The username of this AccessTokenDetails.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessTokenDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessTokenDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
