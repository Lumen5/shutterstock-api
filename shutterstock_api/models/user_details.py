# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contributor_id': 'str',
        'customer_id': 'str',
        'email': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'id': 'str',
        'is_premier': 'bool',
        'is_premier_parent': 'bool',
        'language': 'str',
        'last_name': 'str',
        'only_enhanced_license': 'bool',
        'only_sensitive_use': 'bool',
        'organization_id': 'str',
        'premier_permissions': 'list[str]',
        'username': 'str'
    }

    attribute_map = {
        'contributor_id': 'contributor_id',
        'customer_id': 'customer_id',
        'email': 'email',
        'first_name': 'first_name',
        'full_name': 'full_name',
        'id': 'id',
        'is_premier': 'is_premier',
        'is_premier_parent': 'is_premier_parent',
        'language': 'language',
        'last_name': 'last_name',
        'only_enhanced_license': 'only_enhanced_license',
        'only_sensitive_use': 'only_sensitive_use',
        'organization_id': 'organization_id',
        'premier_permissions': 'premier_permissions',
        'username': 'username'
    }

    def __init__(self, contributor_id=None, customer_id=None, email=None, first_name=None, full_name=None, id=None, is_premier=None, is_premier_parent=None, language=None, last_name=None, only_enhanced_license=None, only_sensitive_use=None, organization_id=None, premier_permissions=None, username=None):  # noqa: E501
        """UserDetails - a model defined in Swagger"""  # noqa: E501

        self._contributor_id = None
        self._customer_id = None
        self._email = None
        self._first_name = None
        self._full_name = None
        self._id = None
        self._is_premier = None
        self._is_premier_parent = None
        self._language = None
        self._last_name = None
        self._only_enhanced_license = None
        self._only_sensitive_use = None
        self._organization_id = None
        self._premier_permissions = None
        self._username = None
        self.discriminator = None

        if contributor_id is not None:
            self.contributor_id = contributor_id
        if customer_id is not None:
            self.customer_id = customer_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if full_name is not None:
            self.full_name = full_name
        if id is not None:
            self.id = id
        if is_premier is not None:
            self.is_premier = is_premier
        if is_premier_parent is not None:
            self.is_premier_parent = is_premier_parent
        if language is not None:
            self.language = language
        if last_name is not None:
            self.last_name = last_name
        if only_enhanced_license is not None:
            self.only_enhanced_license = only_enhanced_license
        if only_sensitive_use is not None:
            self.only_sensitive_use = only_sensitive_use
        if organization_id is not None:
            self.organization_id = organization_id
        if premier_permissions is not None:
            self.premier_permissions = premier_permissions
        if username is not None:
            self.username = username

    @property
    def contributor_id(self):
        """Gets the contributor_id of this UserDetails.  # noqa: E501

        Unique internal identifier of the user, as a contributor  # noqa: E501

        :return: The contributor_id of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._contributor_id

    @contributor_id.setter
    def contributor_id(self, contributor_id):
        """Sets the contributor_id of this UserDetails.

        Unique internal identifier of the user, as a contributor  # noqa: E501

        :param contributor_id: The contributor_id of this UserDetails.  # noqa: E501
        :type: str
        """

        self._contributor_id = contributor_id

    @property
    def customer_id(self):
        """Gets the customer_id of this UserDetails.  # noqa: E501

        Unique internal identifier of the user, as a purchaser  # noqa: E501

        :return: The customer_id of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this UserDetails.

        Unique internal identifier of the user, as a purchaser  # noqa: E501

        :param customer_id: The customer_id of this UserDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """Gets the email of this UserDetails.  # noqa: E501

        Email address of the user  # noqa: E501

        :return: The email of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDetails.

        Email address of the user  # noqa: E501

        :param email: The email of this UserDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserDetails.  # noqa: E501

        First name of the user  # noqa: E501

        :return: The first_name of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDetails.

        First name of the user  # noqa: E501

        :param first_name: The first_name of this UserDetails.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this UserDetails.  # noqa: E501

        Full name including first, middle, and last name of the user  # noqa: E501

        :return: The full_name of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserDetails.

        Full name including first, middle, and last name of the user  # noqa: E501

        :param full_name: The full_name of this UserDetails.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this UserDetails.  # noqa: E501

        Unique internal identifier for the user, not tied to contributor or purchasing customer  # noqa: E501

        :return: The id of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDetails.

        Unique internal identifier for the user, not tied to contributor or purchasing customer  # noqa: E501

        :param id: The id of this UserDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_premier(self):
        """Gets the is_premier of this UserDetails.  # noqa: E501

        True if the user has access to the Premier collection, false otherwise  # noqa: E501

        :return: The is_premier of this UserDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_premier

    @is_premier.setter
    def is_premier(self, is_premier):
        """Sets the is_premier of this UserDetails.

        True if the user has access to the Premier collection, false otherwise  # noqa: E501

        :param is_premier: The is_premier of this UserDetails.  # noqa: E501
        :type: bool
        """

        self._is_premier = is_premier

    @property
    def is_premier_parent(self):
        """Gets the is_premier_parent of this UserDetails.  # noqa: E501

        True if the user has access to the Premier collection and also has child users  # noqa: E501

        :return: The is_premier_parent of this UserDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_premier_parent

    @is_premier_parent.setter
    def is_premier_parent(self, is_premier_parent):
        """Sets the is_premier_parent of this UserDetails.

        True if the user has access to the Premier collection and also has child users  # noqa: E501

        :param is_premier_parent: The is_premier_parent of this UserDetails.  # noqa: E501
        :type: bool
        """

        self._is_premier_parent = is_premier_parent

    @property
    def language(self):
        """Gets the language of this UserDetails.  # noqa: E501

        Main language of the user account  # noqa: E501

        :return: The language of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserDetails.

        Main language of the user account  # noqa: E501

        :param language: The language of this UserDetails.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this UserDetails.  # noqa: E501

        Last name of the user  # noqa: E501

        :return: The last_name of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDetails.

        Last name of the user  # noqa: E501

        :param last_name: The last_name of this UserDetails.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def only_enhanced_license(self):
        """Gets the only_enhanced_license of this UserDetails.  # noqa: E501

        True if the user has an enterprise license, false otherwise  # noqa: E501

        :return: The only_enhanced_license of this UserDetails.  # noqa: E501
        :rtype: bool
        """
        return self._only_enhanced_license

    @only_enhanced_license.setter
    def only_enhanced_license(self, only_enhanced_license):
        """Sets the only_enhanced_license of this UserDetails.

        True if the user has an enterprise license, false otherwise  # noqa: E501

        :param only_enhanced_license: The only_enhanced_license of this UserDetails.  # noqa: E501
        :type: bool
        """

        self._only_enhanced_license = only_enhanced_license

    @property
    def only_sensitive_use(self):
        """Gets the only_sensitive_use of this UserDetails.  # noqa: E501

        True if the user has access to sensitive use only, false otherwise  # noqa: E501

        :return: The only_sensitive_use of this UserDetails.  # noqa: E501
        :rtype: bool
        """
        return self._only_sensitive_use

    @only_sensitive_use.setter
    def only_sensitive_use(self, only_sensitive_use):
        """Sets the only_sensitive_use of this UserDetails.

        True if the user has access to sensitive use only, false otherwise  # noqa: E501

        :param only_sensitive_use: The only_sensitive_use of this UserDetails.  # noqa: E501
        :type: bool
        """

        self._only_sensitive_use = only_sensitive_use

    @property
    def organization_id(self):
        """Gets the organization_id of this UserDetails.  # noqa: E501

        Unique internal identifier for the user's organization, specific to Premier users  # noqa: E501

        :return: The organization_id of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this UserDetails.

        Unique internal identifier for the user's organization, specific to Premier users  # noqa: E501

        :param organization_id: The organization_id of this UserDetails.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def premier_permissions(self):
        """Gets the premier_permissions of this UserDetails.  # noqa: E501

        List of permissions allowed through the Premier client  # noqa: E501

        :return: The premier_permissions of this UserDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._premier_permissions

    @premier_permissions.setter
    def premier_permissions(self, premier_permissions):
        """Sets the premier_permissions of this UserDetails.

        List of permissions allowed through the Premier client  # noqa: E501

        :param premier_permissions: The premier_permissions of this UserDetails.  # noqa: E501
        :type: list[str]
        """

        self._premier_permissions = premier_permissions

    @property
    def username(self):
        """Gets the username of this UserDetails.  # noqa: E501

        User name associated to the user  # noqa: E501

        :return: The username of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserDetails.

        User name associated to the user  # noqa: E501

        :param username: The username of this UserDetails.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
