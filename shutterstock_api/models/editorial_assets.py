# coding: utf-8

"""
    Shutterstock API Reference

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shutterstock_api.models.image_size_details import ImageSizeDetails  # noqa: F401,E501
from shutterstock_api.models.thumbnail import Thumbnail  # noqa: F401,E501


class EditorialAssets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original': 'ImageSizeDetails',
        'thumb_170': 'Thumbnail',
        'thumb_220': 'Thumbnail',
        'watermark_450': 'Thumbnail',
        'watermark_1500': 'Thumbnail',
        'small_jpg': 'ImageSizeDetails',
        'medium_jpg': 'ImageSizeDetails'
    }

    attribute_map = {
        'original': 'original',
        'thumb_170': 'thumb_170',
        'thumb_220': 'thumb_220',
        'watermark_450': 'watermark_450',
        'watermark_1500': 'watermark_1500',
        'small_jpg': 'small_jpg',
        'medium_jpg': 'medium_jpg'
    }

    def __init__(self, original=None, thumb_170=None, thumb_220=None, watermark_450=None, watermark_1500=None, small_jpg=None, medium_jpg=None):  # noqa: E501
        """EditorialAssets - a model defined in Swagger"""  # noqa: E501

        self._original = None
        self._thumb_170 = None
        self._thumb_220 = None
        self._watermark_450 = None
        self._watermark_1500 = None
        self._small_jpg = None
        self._medium_jpg = None
        self.discriminator = None

        if original is not None:
            self.original = original
        if thumb_170 is not None:
            self.thumb_170 = thumb_170
        if thumb_220 is not None:
            self.thumb_220 = thumb_220
        if watermark_450 is not None:
            self.watermark_450 = watermark_450
        if watermark_1500 is not None:
            self.watermark_1500 = watermark_1500
        if small_jpg is not None:
            self.small_jpg = small_jpg
        if medium_jpg is not None:
            self.medium_jpg = medium_jpg

    @property
    def original(self):
        """Gets the original of this EditorialAssets.  # noqa: E501


        :return: The original of this EditorialAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this EditorialAssets.


        :param original: The original of this EditorialAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._original = original

    @property
    def thumb_170(self):
        """Gets the thumb_170 of this EditorialAssets.  # noqa: E501


        :return: The thumb_170 of this EditorialAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._thumb_170

    @thumb_170.setter
    def thumb_170(self, thumb_170):
        """Sets the thumb_170 of this EditorialAssets.


        :param thumb_170: The thumb_170 of this EditorialAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._thumb_170 = thumb_170

    @property
    def thumb_220(self):
        """Gets the thumb_220 of this EditorialAssets.  # noqa: E501


        :return: The thumb_220 of this EditorialAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._thumb_220

    @thumb_220.setter
    def thumb_220(self, thumb_220):
        """Sets the thumb_220 of this EditorialAssets.


        :param thumb_220: The thumb_220 of this EditorialAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._thumb_220 = thumb_220

    @property
    def watermark_450(self):
        """Gets the watermark_450 of this EditorialAssets.  # noqa: E501


        :return: The watermark_450 of this EditorialAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._watermark_450

    @watermark_450.setter
    def watermark_450(self, watermark_450):
        """Sets the watermark_450 of this EditorialAssets.


        :param watermark_450: The watermark_450 of this EditorialAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._watermark_450 = watermark_450

    @property
    def watermark_1500(self):
        """Gets the watermark_1500 of this EditorialAssets.  # noqa: E501


        :return: The watermark_1500 of this EditorialAssets.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._watermark_1500

    @watermark_1500.setter
    def watermark_1500(self, watermark_1500):
        """Sets the watermark_1500 of this EditorialAssets.


        :param watermark_1500: The watermark_1500 of this EditorialAssets.  # noqa: E501
        :type: Thumbnail
        """

        self._watermark_1500 = watermark_1500

    @property
    def small_jpg(self):
        """Gets the small_jpg of this EditorialAssets.  # noqa: E501


        :return: The small_jpg of this EditorialAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._small_jpg

    @small_jpg.setter
    def small_jpg(self, small_jpg):
        """Sets the small_jpg of this EditorialAssets.


        :param small_jpg: The small_jpg of this EditorialAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._small_jpg = small_jpg

    @property
    def medium_jpg(self):
        """Gets the medium_jpg of this EditorialAssets.  # noqa: E501


        :return: The medium_jpg of this EditorialAssets.  # noqa: E501
        :rtype: ImageSizeDetails
        """
        return self._medium_jpg

    @medium_jpg.setter
    def medium_jpg(self, medium_jpg):
        """Sets the medium_jpg of this EditorialAssets.


        :param medium_jpg: The medium_jpg of this EditorialAssets.  # noqa: E501
        :type: ImageSizeDetails
        """

        self._medium_jpg = medium_jpg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorialAssets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorialAssets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
